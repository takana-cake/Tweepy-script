'''

Description
---------------
1. ユーザごとにハッシュタグを保持。とりあえずjsonで管理
	vtuber{
		user1:
			{
			},
		user2:{}
	}
2. プロフィールとTLのハッシュタグを監視
	user_description_check()　プロフ
	TL検索時についでにチェック
3. ハッシュタグの関連付け(追加)は手動
	hashtag_add()　引数あり(ユーザ、タグ1、タグ2・・・)
4. ハッシュタグで検索。最終検索時刻保持
	search_hashtags()
5. ユーザのTLを検索。最終検索時刻保持
	search_user_tl()

とりあえずダブり画像は考えないものとする



'''

# _*_ coding: utf-8 _*_

import tweepy
import sys
import urllib.request
import os
import datetime
import time
import json

# 認証
twitter_conf = {
    'consumer' : {
        'key'    : "",
        'secret' : ""
    },
    'access'   : {
        'key'    : "",
        'secret' : ""
    }
}
auth = tweepy.OAuthHandler(
    twitter_conf['consumer']['key'],
    twitter_conf['consumer']['secret'])
auth.set_access_token(
    twitter_conf['access']['key'],
    twitter_conf['access']['secret'])

api = tweepy.API(auth)


def init_userlist(users):
	for i in users:
		vtuber[i] = ""
	json_file = open(working_directory + "/user_list.json",'w')
	json.dump(vtuber,json_file)
	json_file.close()

def hashtag_add():
	# 引数あり(ユーザ、タグ1、タグ2・・・)
	json_file = open(working_directory + "user_list.json",'r')
	user_list_json = json.load(json_file)
	json_file.close()

def user_description_check():
	description = api.get_user(my_id).description
	description = re.sub(r'#', " #", description)
	pattern = re.compile(r'[\s\[\]\(\)\<\>\（\）\＜\＞\"\']')
	description_split = re.split(pattern, description)
	description_hashtags = [x for x in description_split if '#' in x]

def search_hashtags():

def search_user_tl():




