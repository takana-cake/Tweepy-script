'''

---------------
Description
---------------
file_path/
　├ vtubermedia_downloader.py
　├ user_list.json
　├ tag_list.txt
　├ user1/
　│　└ <dl media>
　├ user2/

1. ユーザごとにハッシュタグを保持。とりあえずjsonで管理
	vtuber{user1:{TL用:date, tag1:date, tag2:date}, user2:{TL用:date, tag1:date, tag2:date}}
2. プロフィールとTLのハッシュタグを監視
	user_description_check()　プロフ
	TL検索時についでにチェック
3. ハッシュタグの関連付け(追加)は手動
	hashtag_add()　引数あり(ユーザ、タグ1、タグ2・・・)
4. ハッシュタグで検索。最終検索時刻保持
	search_hashtags()
5. ユーザのTLを検索。最終検索時刻保持
	search_user_tl()

とりあえずダブり画像は考えないものとする

---------------
Flow
---------------
init jsonチェック
user or hash追加チェック
ユーザプロフチェック
TLチェック
ハッシュタグチェック

'''

# _*_ coding: utf-8 _*_

import tweepy
import sys
import urllib.request
import os
import datetime
import time
import json



def tweepy_api():
	twitter_conf = {
	    'consumer' : {
	        'key'    : "",
	        'secret' : ""
	    },
	    'access'   : {
	        'key'    : "",
	        'secret' : ""
	    }
	}
	auth = tweepy.OAuthHandler(
	    twitter_conf['consumer']['key'],
	    twitter_conf['consumer']['secret'])
	auth.set_access_token(
	    twitter_conf['access']['key'],
	    twitter_conf['access']['secret'])
	tweepy_auth = tweepy.API(auth)
	return(tweepy_auth)

def init_script():
	print('please run "python3 vtubermedia_downloader.py user_add user1 user2..."')
	sys.exit()

def user_add(users):
	del users[0:2]
	for i in users:
		list1 = ["dummy"]
		list1 = list1.insert.user_description_check(i)
		vtuber[i] = ""
		vtuber[i] = user_description_check(i)
	json_file = open(file_path + "/user_list.json",'w')
	json.dump(vtuber,json_file)
	json_file.close()

def hashtag_add(tags):
	key = tags[2]
	del tags[0:3]
	json_file = open(file_path + "user_list.json",'r')
	user_list_json = json.load(json_file)
	json_file.close()

def user_description_check(check_userid):
	description = api.get_user(check_userid).description
	description = re.sub(r'#', " #", description)
	pattern = re.compile(r'[\s\[\]\(\)\<\>\（\）\＜\＞\"\']')
	description_split = re.split(pattern, description)
	description_hashtags = [x for x in description_split if '#' in x]
	return(description_hashtags)

def search_hashtags():

def search_user_tl():

def media_get(twi_def, follow_id_def):
	# 画像取得
	mediaget_fault_count = 0
	# リツイート判断
	if hasattr(twi_def, 'retweeted_status') is False:
		# 画像保存
		if hasattr(twi_def, "extended_entities"):
			if 'media' in twi_def.extended_entities:
				for media in twi_def.extended_entities["media"]:
					if media["type"] == 'photo':
						dl_filename = media["media_url"]
						dl_media = dl_filename + ":orig"
					if media["type"] == 'animated_gif':
						dl_media = media["video_info"]["variants"][0]["url"]
						dl_filename = dl_media
					if media["type"] == 'video':
						dl_media = media["video_info"]["variants"][0]["url"]
						if '.m3u8' in dl_media:
							dl_media = media["video_info"]["variants"][1]["url"]
						if '?tag=' in dl_media:
							dl_media = dl_media[:-6]
							#dl_media = dl_media.replace("?tag=3", "")
						dl_filename = dl_media
					try:
						with open(working_directory + "/" + follow_id_def + "/" + os.path.basename(dl_filename), 'wb') as f:
							dl_file = urllib.request.urlopen(dl_media).read()
							f.write(dl_file)
					except Exception as err:
						print(str(datetime.datetime.now()) + str(follow_id_def) + ": 03: " + str(dl_media) + ": TC=" + str(mediaget_fault_count) + ": " + str(err))
						with open(working_directory + "/_log.txt",'a') as f:
							f.write(str(datetime.datetime.now()) + ": " + str(follow_id_def) + ": 03: " + str(dl_media) + ": TC=" + str(mediaget_fault_count) + ": " + str(err) + "\n")
						mediaget_fault_count = mediaget_fault_count +1
						if mediaget_fault_count < 3:
							time.sleep(60)
							continue
						else:
							with open(working_directory + "/" + follow_id_def + "/" + os.path.basename(dl_filename), 'wb') as f:
								dl_file = urllib.request.urlopen(dl_filename).read()
								f.write(dl_file)
							mediaget_fault_count = 0
					mediaget_fault_count = 0



# main

file_path = os.getcwd()
#working_directory

args = sys.argv
if len(args) != 1:
	if args[1] is 'user_add':
		user_add(args)
	elif os.path.exists(file_path + "user_list.json") == False:
		init_script()
	elif args[1] is 'hashtag_add':
		hashtag_add(args)
	else:
		print("please chech again: " + args)
		sys.exit()
elif os.path.exists(file_path + "user_list.json") == False:
	init_script()

json_file = open(file_path + "user_list.json",'r')
chech_list = json.load(json_file)
json_file.close()

api = tweepy_api()
for user,tags in chech_list.items():
	user_description_check_result = user_description_check(user)
	for i in user_description_check_result:
		if tags has user_description_check_result:
	search_user_tl(user)
	search_hashtags(tags)

