'''

Description
---------------
file_path/
　├ vtubermedia_downloader.py
　├ user_list.json
　├ user1/
　│　└ <dl media>
　├ user2/

1. ユーザごとにハッシュタグを保持。とりあえずjsonで管理
	vtuber{
		user1:
			{
			},
		user2:{}
	}
2. プロフィールとTLのハッシュタグを監視
	user_description_check()　プロフ
	TL検索時についでにチェック
3. ハッシュタグの関連付け(追加)は手動
	hashtag_add()　引数あり(ユーザ、タグ1、タグ2・・・)
4. ハッシュタグで検索。最終検索時刻保持
	search_hashtags()
5. ユーザのTLを検索。最終検索時刻保持
	search_user_tl()

とりあえずダブり画像は考えないものとする



'''

# _*_ coding: utf-8 _*_

import tweepy
import sys
import urllib.request
import os
import datetime
import time
import json

# 認証
twitter_conf = {
    'consumer' : {
        'key'    : "",
        'secret' : ""
    },
    'access'   : {
        'key'    : "",
        'secret' : ""
    }
}
auth = tweepy.OAuthHandler(
    twitter_conf['consumer']['key'],
    twitter_conf['consumer']['secret'])
auth.set_access_token(
    twitter_conf['access']['key'],
    twitter_conf['access']['secret'])

api = tweepy.API(auth)

def init_script():
	print('please run "user_add user1 user2..."')
	sys.exit()

def user_add(users):
	# 引数あり(user_add、ユーザ1、ユーザ2・・・)
	for i in users:
		vtuber[i] = ""
	json_file = open(file_path + "/user_list.json",'w')
	json.dump(vtuber,json_file)
	json_file.close()

def hashtag_add():
	# 引数あり(hashtag_add、ユーザ、タグ1、タグ2・・・)
	json_file = open(file_path + "user_list.json",'r')
	user_list_json = json.load(json_file)
	json_file.close()

def user_description_check():
	description = api.get_user(my_id).description
	description = re.sub(r'#', " #", description)
	pattern = re.compile(r'[\s\[\]\(\)\<\>\（\）\＜\＞\"\']')
	description_split = re.split(pattern, description)
	description_hashtags = [x for x in description_split if '#' in x]

def search_hashtags():

def search_user_tl():


# main

file_path = os.getcwd()
#working_directory

if args[1] is 'user_add':
	user_add(args)
elif args[1] is 'hashtag_add':
	hashtag_add(args)
elif args[1]:
	print("please chech again: " + args)
	sys.exit()
elif os.path.exists(file_path + "user_list.json") == False:
	init_script()

